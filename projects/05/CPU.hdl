// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aRegisterIn);

    Not(in=instruction[15], out=notCInstruction);
    And(a=instruction[15], b=instruction[5], out=CInstructionLoadARegister);
    Or(a=notCInstruction, b=CInstructionLoadARegister, out=loadARegister);
    ARegister(in=aRegisterIn, load=loadARegister, out=aRegisterOut, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[4], out=loadDRegister);
    DRegister(in=aluOut, load=loadDRegister, out=dRegisterOut);

    And(a=instruction[15], b=instruction[12], out=readM);
    Mux16(a=aRegisterOut, b=inM, sel=readM, out=aluYIn);

    And(a=instruction[15], b=instruction[11], out=zx);
    And(a=instruction[15], b=instruction[10], out=nx);
    And(a=instruction[15], b=instruction[9], out=zy);
    And(a=instruction[15], b=instruction[8], out=ny);
    And(a=instruction[15], b=instruction[7], out=f);
    And(a=instruction[15], b=instruction[6], out=no);
    ALU(x=dRegisterOut, y=aluYIn, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=aluZR, ng=aluNG);
    And(a=instruction[3], b=instruction[15], out=writeM);

    And(a=aluNG, b=instruction[2], out=j1);
    And(a=aluZR, b=instruction[1], out=j2);
    Not(in=aluNG, out=NotJ1);
    Not(in=aluZR, out=NotJ2);
    And(a=NotJ1, b=NotJ2, out=NotJ1AndNotJ2);
    And(a=NotJ1AndNotJ2, b=instruction[0], out=j3);

    Or(a=j1, b=j2, out=j1OrJ2);
    Or(a=j1OrJ2, b=j3, out=j1OrJ2OrJ3);

    And(a=instruction[15], b=j1OrJ2OrJ3, out=loadPC);
    PC(in=aRegisterOut, reset=reset, load=loadPC, inc=true, out[0..14]=pc);
}
